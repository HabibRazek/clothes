// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Updated User model for Auth.js compatibility
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  // Custom fields
  firstName String?
  lastName  String?
  phone     String?
  password  String?
  role      UserRole @default(BUYER)

  // Profile information
  isVerified Boolean @default(false)

  // Two-Factor Authentication
  twoFactorEnabled Boolean @default(false) @map("two_factor_enabled")
  twoFactorSecret  String? @map("two_factor_secret")
  twoFactorBackupCodes String[] @default([]) @map("two_factor_backup_codes")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auth.js relations
  accounts Account[]
  sessions Session[]

  // App relations
  addresses Address[]
  seller    Seller?
  orders    Order[]
  reviews   Review[]
  favorites Favorite[]
  cart      Cart?

  @@map("users")
}

model Address {
  id         String  @id @default(cuid())
  userId     String
  street     String
  city       String
  postalCode String
  country    String
  isDefault  Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model Seller {
  id              String     @id @default(cuid())
  userId          String     @unique
  storeName       String
  storeDescription String?
  sellerType      SellerType
  businessNumber  String?

  // Seller stats
  rating          Float?
  totalSales      Int        @default(0)
  isVerified      Boolean    @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[]

  @@map("sellers")
}

model Category {
  id          String @id @default(cuid())
  name        String
  slug        String @unique
  description String?
  parentId    String?

  // Display properties
  icon        String? // Icon name for UI
  color       String? // Color code for UI
  image       String? // Category image URL
  order       Int     @default(0) // Display order
  isActive    Boolean @default(true)

  // SEO and metadata
  metaTitle       String?
  metaDescription String?

  // Category level (0 = root, 1 = subcategory, etc.)
  level       Int     @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@unique([name, parentId]) // Allow same name in different parent categories
  @@map("categories")
}

model Product {
  id          String        @id @default(cuid())
  sellerId    String
  categoryId  String
  title       String
  description String
  price       Float
  originalPrice Float?      // For showing discounts
  condition   ProductCondition

  // Basic attributes
  size        String?
  brand       String?
  color       String?
  material    String?

  // Clothing specific attributes
  gender      Gender?       // For clothing categories
  season      Season?       // Spring, Summer, Fall, Winter
  style       String?       // Casual, Formal, Sport, etc.

  // Shoes specific attributes
  shoeSize    String?       // EU, US, UK sizes
  heelHeight  String?       // For women's shoes

  // Bags & Accessories specific
  bagType     String?       // Handbag, Backpack, Clutch, etc.
  dimensions  String?       // Length x Width x Height

  // Beauty specific attributes
  skinType    String?       // Dry, Oily, Combination, Sensitive
  shadeColor  String?       // For makeup products
  expiryDate  DateTime?     // For beauty products

  // Product status and metrics
  status      ProductStatus @default(ACTIVE)
  isPromoted  Boolean       @default(false)
  isFeatured  Boolean       @default(false)
  views       Int           @default(0)
  likes       Int           @default(0)

  // Location and shipping
  location    String?       // City/Region
  country     String?       // Country
  shippingCost Float?       // Shipping cost
  canDeliver  Boolean       @default(true)
  canPickup   Boolean       @default(false)

  // SEO and tags
  tags        String[]      @default([])

  // Additional product details
  weight      Float?        // Product weight in kg
  measurements String?      // Detailed measurements
  keywords    String[]      @default([])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  seller    Seller       @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  category  Category     @relation(fields: [categoryId], references: [id])
  images    ProductImage[]
  orderItems OrderItem[]
  reviews   Review[]
  favorites Favorite[]
  cartItems CartItem[]

  @@map("products")
}

model ProductImage {
  id        String @id @default(cuid())
  productId String
  url       String
  altText   String?
  order     Int    @default(0)

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  addressId String?
  status    OrderStatus @default(PENDING)

  // Delivery information for orders without saved address
  deliveryFirstName String?
  deliveryLastName  String?
  deliveryStreet    String?
  deliveryCity      String?
  deliveryPostalCode String?
  deliveryCountry   String?

  // Order totals
  subtotal     Float
  shippingCost Float
  tax          Float
  total        Float

  // Payment information
  paymentMethod PaymentMethod @default(CARD)
  paymentStatus PaymentStatus @default(PENDING)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id])
  address   Address?    @relation(fields: [addressId], references: [id])
  items     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Cart {
  id     String @id @default(cuid())
  userId String @unique

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String
  productId String
  quantity  Int    @default(1)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId]) // Prevent duplicate products in same cart
  @@map("cart_items")
}

model Review {
  id        String @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Favorite {
  id        String @id @default(cuid())
  userId    String
  productId String

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}

// Enums
enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum SellerType {
  INDIVIDUAL
  BUSINESS
  PROFESSIONAL
}

enum ProductCondition {
  NEW_WITH_TAGS
  NEW_WITHOUT_TAGS
  VERY_GOOD
  GOOD
  SATISFACTORY
}

enum ProductStatus {
  ACTIVE
  SOLD
  INACTIVE
  PENDING_APPROVAL
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CARD
  PAYPAL
  CASH_ON_DELIVERY
  BANK_TRANSFER
}

enum Gender {
  WOMEN
  MEN
  UNISEX
  KIDS_GIRLS
  KIDS_BOYS
  BABY
}

enum Season {
  SPRING
  SUMMER
  FALL
  WINTER
  ALL_SEASON
}
